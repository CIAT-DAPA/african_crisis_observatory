val
val %>%
purrr::map(.f = function(x){select_vars(reference = key, values = x)})
selected <- val %>%
purrr::map(.f = function(x){select_vars(reference = key, values = x)}) %>%
unlist()
key <- ip_tbl$Values[grep(pattern = '[cC]limate', x = ip_tbl$Dimension)]
key <- strsplit(x = key, split = "\\s{2,}") %>% unlist() %>% unique() %>% na.omit() %>% as.character() %>% tolower()
# Climate variables from dictionary
val <- vr_tbl$Category[vr_tbl$Classification == 'Climate']
val <- strsplit(x = val, split = ';')
# Function to do the match between key and values
select_vars <- function(reference = key, values = val[[6]]){
if(all(is.na(values))){
out <- NA; return(NA)
}else{
grep2 <- Vectorize(FUN = grep, vectorize.args = 'pattern')
out <- unlist(grep2(pattern = values, x = key))
if(length(out) > 0){out <- 1} else {out <- NA}
return(out)
}
}
selected <- val %>%
purrr::map(.f = function(x){select_vars(reference = key, values = x)}) %>%
unlist()
selected
length(selected)
nrow(val)
key
nrow(vr_tbl)
vr_tbl$Variable[vr_tbl$Classification == 'Climate']
vr_tbl$Code[vr_tbl$Classification == 'Climate']
data.frame(Variable = vr_tbl$Variable[vr_tbl$Classification == 'Climate'],
Code     = vr_tbl$Code[vr_tbl$Classification == 'Climate'],
Selected = selected)
result <- data.frame(Variable = vr_tbl$Variable[vr_tbl$Classification == 'Climate'],
Code     = vr_tbl$Code[vr_tbl$Classification == 'Climate'],
Selected = selected)
result <- result %>% tidyr::drop_na()
result
source(paste0(root, "code/hotspots/00_link_IPinfo_climate_clusters.R"))
root <- 'C:/Users/acmendez/OneDrive - CGIAR/African_Crisis_Observatory/'
country_iso2 <- iso <- "KEN"
country <- 'Kenya'
source(paste0(root, "code/hotspots/00_link_IPinfo_climate_clusters.R"))
select_clim_vars(root = substr(root, start = 1, stop = nchar(root)-1 ),
iso  = iso,
cntr = country)
result
write.csv(resutl, dest_dir, row.names = F)
source(paste0(root, "code/hotspots/00_link_IPinfo_climate_clusters.R"))
select_clim_vars(root = substr(root, start = 1, stop = nchar(root)-1 ),
iso  = iso,
cntr = country)
df <- readxl::read_excel(paste0(root,'/Country_pathways.xlsx'), sheet = 2)
df <- df %>% dplyr::filter(Country == country & Dimension == 'Climate')
df$Variable
select_clim_vars(root = substr(root, start = 1, stop = nchar(root)-1 ),
iso  = iso,
cntr = country) %>%
dplyr::pull(Code)
df <- readxl::read_excel(paste0(root,'/Country_pathways.xlsx'), sheet = 2)
df <- df %>% dplyr::filter(Country == country & Dimension == 'Climate')
clm <- df$Variable
clm
source(paste0(root, "code/hotspots/00_link_IPinfo_climate_clusters.R"))
clm <- select_clim_vars(root = substr(root, start = 1, stop = nchar(root)-1 ),
iso  = iso,
cntr = country) %>%
dplyr::pull(Code)
fls <- list.files(path = paste0(root,'/data/',country_iso2), pattern = 'tif$', full.names = T, recursive = T)
grep2 <- Vectorize(FUN = grep, vectorize.args = 'pattern')
fls <- fls[unlist(grep2(pattern = clm, x = fls))]; rm(clm)
fls <- unique(fls)
fls <- as.character(na.omit(fls))
fls
clm <- select_clim_vars(root = substr(root, start = 1, stop = nchar(root)-1 ),
iso  = iso,
cntr = country) %>%
dplyr::pull(Code) %>%
unique()
clm
file_paths <- tibble(path = fls,
type = "climate" ) %>%
add_row(path = c(list.files(paste0(baseDir, '/conflict'), pattern = ".tif$", full.names = T)), type = "conflict")
check_files <- lapply(file_paths$path, file.exists) %>% unlist()
world_mask <- raster(paste0(root, "/data/_global/masks/mask_world_1km.tif"))
pop_dens <- raster::raster(paste0(root,"/data/",iso, "/population_density/medn_popd.tif"))
knl <- raster::raster(paste0(root, "/data/", iso, "/conflict/conflict_kernel_density.tif"))
crs(knl) <- crs(world_mask)
shp <- raster::shapefile(paste0(baseDir,"/_shps/",country_iso2,".shp" )) %>%
sf::st_as_sf() %>%
dplyr::mutate(id = 1:nrow(.))
grd <- st_make_grid(st_bbox(extent(shp)+2), cellsize = 0.2, square =  T) %>%
st_as_sf(.) %>%
dplyr::mutate(id = 1:nrow(.))
shp_ext = extent(grd)
rast_path
file_paths
file_paths[11]
file_paths[11,]
rast_path <- file_paths[11,1]
r <- raster(rast_path)
rast_path
rast_path <- file_paths[11,1] %>% unlist
r <- raster(rast_path)
r
var(r[])
var(r[], na.rm = T)
hist(r[])
sd(r[])
sd(r[], na.rm = T)
suppressMessages(library(pacman))
suppressMessages(pacman::p_load(tidyverse,terra,raster,sf,stars,motif,tmap))
suppressMessages(pacman::p_load(meteo,sp,spacetime,gstat,plyr,xts,snowfall,doParallel,CAST,ranger))
suppressMessages(pacman::p_load(spatstat,maptools, Rcpp, maptree, exactextractr))
reclass_raster <- function(rast_path , shp_ext, world_mask, shp_country, dimension, conflict_area){
r <- raster(rast_path)
#r <- raster(file_paths$path[13] )
#if(as.character(res(r)[1]) != as.character(res(world_mask)[1])){
cat(paste("processign: ", rast_path, "\n"))
w_msk<- world_mask %>%
raster::crop(., shp_ext)
#extent(world_mask) <- extent(world_mask)+5
r <- r %>%
raster::resample(., w_msk)
if(dimension == "conflict"){
c_area <- raster::shapefile(conflict_area)
r <- r %>%
raster::crop(., extent(c_area)) %>%
raster::mask(., c_area)
# if(grepl("FATALITIES|EVENTS", names(r))){
#   pop_dens <- raster(paste0(baseDir, "/population_density/medn_popd.tif")) %>%
#     raster::resample(., w_msk) %>%
#     raster::crop(., extent(r))
#
#   r <- r/pop_dens
#   r[is.infinite(r[])] <- 0
# }
}
#}
if(length(unique(r[])) > 10){
cat(rast_path, " reclassifying \n")
qtl <- raster::quantile(r[r[] !=0], seq(.2,1,.2))
rclmat <- data.frame(x1 = c(min(r[], na.rm = T),qtl[-length(qtl)]), x2 = qtl, y = 1:5) %>% as.matrix()
ret <- r %>%
raster::reclassify(., rclmat)
ret <- stars::st_as_stars(ret)
}else{
cat(rast_path, " Not need for reclassify \n")
ret <- r %>%
stars::st_as_stars()
}
return(ret)
}
get_conflic_data <- function(root, iso, country = 'Senegal'){
out <- paste0(root,'/data/',iso,'/conflict/',iso,'_conflict.csv')
dir.create(path = dirname(out), F, T)
if(!file.exists(out)){
# Filter African conflict to the specific country
cnf <- readxl::read_excel(paste0(root,'/data/_global/conflict/Africa_1997-2021_Apr02.xlsx'), sheet = 1)
cnf <- cnf %>% dplyr::filter(COUNTRY == country)
readr::write_csv(cnf, out)
conflict <- cnf; rm(cnf, out)
} else {
# Load country conflict
conflict <- readr::read_csv(out); rm(out)
}; rm(out)
# Load the country lowest administrative level shapefile
if(!file.exists(paste0(root,'/data/',iso,'/_shps/',iso,'.shp'))){
dir.create(path = dirname(paste0(root,'/data/',iso,'/_shps/',iso,'.shp')), recursive = TRUE)
shp <- lowest_gadm(iso = iso, out = paste0(root,'/data/',iso,'/_shps/',iso,'.shp'))
adm <- grep(pattern = '^NAME_', x = names(shp), value = T)
shp@data$key <- tolower(do.call(paste, c(shp@data[,adm], sep="-")))
} else {
shp <- raster::shapefile(x = paste0(root,'/data/',iso,'/_shps/',iso,'.shp'))
adm <- grep(pattern = '^NAME_', x = names(shp), value = T)
shp@data$key <- tolower(do.call(paste, c(shp@data[,adm], sep="-")))
}
sft <- shp # Shapefile in terra format
# Extract administrative names using reported conflict coordinates by ACLED
conflict  <- cbind(conflict,raster::extract(x = shp, y = conflict[,c('LONGITUDE','LATITUDE')]))
# Get conflict summarization variables per coordinates
cnf_summ <- conflict %>%
dplyr::group_by(LONGITUDE, LATITUDE) %>%
dplyr::summarise(EVENTS           = dplyr::n(),
TYPE_RICHNESS    = EVENT_TYPE %>% unique() %>% length(),
SUBTYPE_RICHNESS = SUB_EVENT_TYPE %>% unique() %>% length(),
ACTOR1_RICHNESS  = ACTOR1 %>% unique() %>% length(),
ACTOR2_RICHNESS  = ACTOR2 %>% unique() %>% length(),
FATALITIES       = sum(FATALITIES)) %>%
dplyr::ungroup() %>%
dplyr::select(x= LONGITUDE, y = LATITUDE, everything(.))
return(list(cnf_summ, sft))
}
get_cluster_labels <- function(df){
conf_cluts_vals <- df %>%
dplyr::select(EVENTS:FATALITIES, starts_with("clust")) %>%
group_by(clust) %>%
dplyr::summarise(m_events = mean(EVENTS)) %>%
arrange(desc(m_events)) %>%
dplyr::mutate(label = c("High conflict", "Moderate conflict", "Limited conflict"),
short_label = c("High", "Moderate", "Limited")) %>%
dplyr::mutate(across(everything(.), as.character),
label = factor(label, levels = c("High conflict","Moderate conflict",  "Limited conflict")))
return(conf_cluts_vals)
}
make_cluster_plots <- function(df){
g <- df %>%
dplyr::select(EVENTS:FATALITIES, starts_with("clust")) %>%
tidyr::pivot_longer(-clust, names_to = "var", values_to = "vals") %>%
ggplot(aes(y= vals, x = clust))+
geom_violin(trim=FALSE, fill="gray")+
geom_boxplot(width=0.1, fill="white")+
facet_wrap(~var, scales = "free")+
xlab("")+
theme_bw(base_size = 10)+
scale_y_log10()
return(g)
}
get_cluster_statistics <- function(df){
df <- df %>%
dplyr::select(-ov) %>%
dplyr::mutate(knl = ifelse(is.na(knl), 0, knl))
clust_median <- df %>%
dplyr::group_by(clust) %>%
dplyr::summarise(across(where(is.numeric), median)) %>%
dplyr::ungroup()
g_median <- df %>%
dplyr::summarise(across(where(is.numeric), median)) %>%
dplyr::mutate(clust = "Global") %>%
dplyr::select(clust, everything())
rel_change <- lapply(
c("EVENTS", "TYPE_RICHNESS" ,"SUBTYPE_RICHNESS", "ACTOR1_RICHNESS", "ACTOR2_RICHNESS" ,"FATALITIES" ,   "knl"),
function(i){
v <- g_median %>% dplyr::pull(i)
ret <- ((clust_median[i] -  v)/v )*100
return(ret)
}
) %>%
dplyr::bind_cols() %>%
dplyr::rename_with(., ~paste0(.x, "_rel_change"))
ret <- clust_median %>%
dplyr::rename_with(., ~paste0(.x, "_median"))%>%
dplyr::bind_cols(rel_change) %>%
dplyr::add_row(g_median %>%
dplyr::rename_with(., ~paste0(.x, "_median" )))
return(ret)
}
get_sum_cl_mtrs <- function(rast_paths, eco_grid_sf,shp_ext, world_mask){
rs <- lapply(rast_paths, function(i){
r <- raster(i) %>%
raster::resample(., world_mask %>% raster::crop(., shp_ext)) %>%
raster::crop(., shp_ext)
}) %>% raster::stack(.)
vals <- exactextractr::exact_extract(rs, eco_grid_sf, full_colnames = T)
df_extracted <- eco_grid_sf %>%
mutate(rast_vals = purrr::map(.x = vals , .f = function(.x){return(.x)})) %>%
dplyr::select(clust, rast_vals) %>%
sf::st_drop_geometry()
df_extracted_final <- lapply(unique(df_extracted$clust), function(i){
ret <- df_extracted %>%
dplyr::filter(clust == i) %>%
dplyr::pull(rast_vals) %>%
bind_rows() %>%
dplyr::mutate(coverage_fraction = i) %>%
dplyr::rename("clust" = coverage_fraction)
return(ret)
}) %>%
bind_rows() %>%
as_tibble
return(df_extracted_final)
}
clust_descriptives <- function(clust_sum){
global_mtrs <- clust_sum %>%
dplyr::select(-clust) %>%
apply(., 2, function(i){
x <- i[i>0]
ret <- median(x, na.rm = T)
return(ret)
})
rast_mts <- clust_sum %>%
dplyr::group_by(clust) %>%
dplyr::summarise(across(everything() , function(i){
x <- i[i > 0 ]
ret <- median(x, na.rm = T)
return(ret)
}  )) %>%
ungroup() %>%
dplyr::select(- clust) %>%
t %>%
as.data.frame() %>%
rownames_to_column() %>%
as_tibble()
names(rast_mts)<- c("Variables", paste0("clust_", 1:(ncol(rast_mts)-1) ))
ret <-  bind_cols(
rast_mts,
apply(rast_mts, 1, function(i){
rast_nm <- i[1]
fnl_nm  <- paste0( "_rel_change")
glb_med <- global_mtrs[names(global_mtrs) == rast_nm]
vals <- round((as.numeric(i[-1]) - glb_med)/glb_med*100, 2)
names(vals) <- paste0(names(i)[-1],"_rel_change")
return(vals)
}) %>% t %>%
as_tibble(),
global_metrics = global_mtrs
)
return(ret)
}
root <- 'C:/Users/acmendez/OneDrive - CGIAR/African_Crisis_Observatory/'
country_iso2 <- iso <- "KEN"
country <- 'Kenya'
baseDir <- paste0(root, "data/",country_iso2)
source(paste0(root, "code/hotspots/00_link_IPinfo_climate_clusters.R"))
clm <- select_clim_vars(root = substr(root, start = 1, stop = nchar(root)-1 ),
iso  = iso,
cntr = country) %>%
dplyr::pull(Code) %>%
unique()
fls <- list.files(path = paste0(root,'/data/',country_iso2), pattern = 'tif$', full.names = T, recursive = T)
grep2 <- Vectorize(FUN = grep, vectorize.args = 'pattern')
fls <- fls[unlist(grep2(pattern = clm, x = fls))]; rm(clm)
fls <- unique(fls)
fls <- as.character(na.omit(fls))
file_paths <- tibble(path = fls,
type = "climate" ) %>%
add_row(path = c(list.files(paste0(baseDir, '/conflict'), pattern = ".tif$", full.names = T)), type = "conflict")
file_paths
world_mask <- raster(paste0(root, "/data/_global/masks/mask_world_1km.tif"))
pop_dens <- raster::raster(paste0(root,"/data/",iso, "/population_density/medn_popd.tif"))
knl <- raster::raster(paste0(root, "/data/", iso, "/conflict/conflict_kernel_density.tif"))
crs(knl) <- crs(world_mask)
shp <- raster::shapefile(paste0(baseDir,"/_shps/",country_iso2,".shp" )) %>%
sf::st_as_sf() %>%
dplyr::mutate(id = 1:nrow(.))
grd <- st_make_grid(st_bbox(extent(shp)+2), cellsize = 0.2, square =  T) %>%
st_as_sf(.) %>%
dplyr::mutate(id = 1:nrow(.))
dimension <- "climate"
cat(">>> starting process for: ", dimension, "\n")
dest_dir <- paste0(baseDir, "/_results/cluster_results/", dimension, "/")
#file_paths %>% filter(type == dimension)  %>% pull(path)
r_files <- lapply(file_paths %>% filter(type == dimension)  %>% pull(path),
reclass_raster,
shp_ext = extent(grd),
world_mask= world_mask,
dimension  = dimension,
conflict_area = paste0(baseDir, "/conflict/conflict_area.shp"))
r_names <- lapply(file_paths %>% filter(type == dimension)  %>% pull(path), function(i){names(raster(i))})
names(r_files) <- unlist(r_names)
eco_data <- r_files %>% purrr::reduce(., c, try_hard = T)
eco_data
eco_signature <- motif::lsp_signature(eco_data, type = "incove", window = grd["id"])
eco_dist      <- motif::lsp_to_dist(eco_signature, dist_fun = "jensen-shannon")
eco_hclust <- hclust(eco_dist, method = "ward.D2")
if(dimension == "conflict"){
c_optim_num <- 3
}else{
optcl2 <- maptree::kgs(cluster = eco_hclust, diss = eco_dist, maxclust = 10)
c_optim_num <- as.numeric(names(optcl2[which(optcl2 == min(optcl2))]))
}
cat(">>> Optim number of cluster is:",c_optim_num ,"/n")
clusters <- cutree(eco_hclust, k = c_optim_num)
pacman::p_load(readxl, tidyverse, MCMCglmm, lme4, Hmisc, forcats)
bd_raw <- readxl::read_excel("C:/Users/acmendez/Downloads/ANOVA_Residuales.xlsx") %>%
drop_na() %>%
dplyr::select(Zafra, Trat, Ymg) %>%
dplyr::mutate(Zafra = as.factor(Zafra))
pacman::p_load(readxl, tidyverse, MCMCglmm, lme4, Hmisc, forcats, lmer)
?lmer
bd_raw
readxl::read_excel("C:/Users/acmendez/Downloads/ANOVA_Residuales.xlsx") %>%
drop_na()
readxl::read_excel("C:/Users/acmendez/Downloads/ANOVA_Residuales.xlsx") %>%
drop_na() %>%
dplyr::select(Zafra, Sitio, Bloq, Trat, Ymg) %>%
dplyr::mutate(Zafra = as.factor(Zafra))
lmer(Ymg ~ Zafra + (1 || Trat) , data = bd_raw)
lmer(Ymg ~ Zafra + (1 | Trat) , data = bd_raw)
lmer(Ymg ~ Zafra + (Zafra | Trat) , data = bd_raw)
lmer(Ymg ~ Zafra + (1 | Trat) , data = bd_raw)
lmer(Ymg ~ Zafra + (Zafra | Trat) , data = bd_raw)
mod_mix1 <- lmer(Ymg ~ Zafra + (1 | Trat) , data = bd_raw)
summary(mod_mix1)
mod_mix1 <- lmer(Ymg ~ Trat + (1 | Zafra) , data = bd_raw)
summary(mod_mix1)
mod_mix1 <- lmer(Ymg ~ Trat + ( 1 | Zafra) , data = bd_raw)
summary(mod_mix1)
lm(Ymg ~ Trat +  Zafra , data = bd_raw) %>% summary
aic(mod_mix1)
AIC(mod_mix1)
bd_raw
bd_raw <- readxl::read_excel("C:/Users/acmendez/Downloads/ANOVA_Residuales.xlsx") %>%
drop_na() %>%
dplyr::select(Zafra, Sitio, Trat, Ymg) %>%
dplyr::mutate(Zafra = as.factor(Zafra))
bd_raw
#comparar los modelos
mod_mix1 <- lmer(Ymg ~ Trat + ( 1 | Zafra) , data = bd_raw)
#summary(mod_mix1)
AIC(mod_mix1)
mod_mix2 <- lmer(Ymg ~ Trat + ( Trat | Zafra) , data = bd_raw)
#summary(mod_mix1)
AIC(mod_mix2)
mod_mix3 <- lmer(Ymg ~ Trat + ( Trat | Zafra) + (Trat | Sitio), data = bd_raw)
#summary(mod_mix1)
AIC(mod_mix3)
mod_mix3 <- lmer(Ymg ~ Trat + ( Trat | Zafra) + (1 | Sitio), data = bd_raw)
mod_mix3 <- lmer(Ymg ~ Trat + Sitio + ( Trat | Zafra) , data = bd_raw)
#comparar los modelos
mod_mix1 <- lmer(Ymg ~ Trat + ( 1 | Zafra) , data = bd_raw)
#summary(mod_mix1)
AIC(mod_mix1)
mod_mix2 <- lmer(Ymg ~ Trat + ( Trat | Zafra) , data = bd_raw)
#summary(mod_mix1)
AIC(mod_mix2)
?sSingular
?isSingular
#comparar los modelos
mod_mix1 <- lmer(Ymg ~ Trat + ( 1 | Zafra) , data = bd_raw)
#summary(mod_mix1)
AIC(mod_mix1)
mod_mix2 <- lmer(Ymg ~ Trat + ( Trat | Zafra) , data = bd_raw)
#summary(mod_mix1)
AIC(mod_mix2)
mod_mix2
summary(mod_mix2)
aov(mod_mix2)
pacman::p_load(readxl, tidyverse, MCMCglmm, lme4, Hmisc, forcats, lmerTest)
lmerTest::ranova(mod_mix2)
lmerTest::ranova(mod_mix)
lmerTest::ranova(mod_mix1)
?ranova
lmerTest::ranova(mod_mix1, mod_mix2)
mod_mix2 <- lmer(Ymg ~ Trat + ( Trat | Zafra) , data = bd_raw)
lmerTest::ranova(mod_mix1, mod_mix2)
mod_mix2 <- lmer(Ymg ~ Trat + (1 | Zafra) + ( Trat | Zafra) , data = bd_raw)
summary(mod_mix2)
AIC(mod_mix2)
lmerTest::ranova(mod_mix1, mod_mix2)
lmerTest::ranova( mod_mix2)
aonva(mod_mix1)
anova(mod_mix1)
anova(mod_mix1) %>% summary
anova(mod_mix1) %>% summary
anova(mod_mix1)
anova(mod_mix2)
#comparar los modelos
mod_mix1 <- lmer(Ymg ~ Trat + Zafra + ( 1 | Zafra) , data = bd_raw)
#comparar los modelos
mod_mix1 <- lmer(Ymg ~ Trat  + ( 1 | Zafra) , data = bd_raw)
lmerTest::ranova(mod_mix1)
anova(mod_mix1)
bd_raw
bd_raw <- readxl::read_excel("C:/Users/acmendez/Downloads/ANOVA_Residuales.xlsx") %>%
drop_na() %>%
dplyr::select(Zafra, Sitio, Trat, Ymg) %>%
dplyr::mutate(Zafra = as.factor(Zafra),
Trat = as.factor(Trat))
#comparar los modelos
mod_mix1 <- lmer(Ymg ~ Trat  + ( 1 | Zafra) , data = bd_raw)
lmerTest::ranova(mod_mix1)
anova(mod_mix1)
TukeyHSD(anova(mod_mix1))
anova(mod_mix1)
TukeyHSD(anova(mod_mix1))
mod_mix2 <- lmer(Ymg ~ Trat + (1 | Zafra) + ( Trat | Zafra) , data = bd_raw)
anova(mod_mix2)
mod_mix2 <- lmer(Ymg ~ Trat  + ( Trat | Zafra) , data = bd_raw)
anova(mod_mix2)
bd_raw
mod_mix2 <- lmer(Ymg ~ Trat  + ( Trat | Zafra) , data = bd_raw)
summary(mod_mix2)
#comparar los modelos
mod_mix1 <- lmer(Ymg ~ Trat  + ( 1 | Zafra) , data = bd_raw)
anova(mod_mix2)
#summary(mod_mix1)
AIC(mod_mix1)
anova(mod_mix1)
lmerTest::anova(mod_mix1)
?lmerTest::difflsmeans()
lmerTest::difflsmeans(mod_mix1)
bd_raw %>%
ggplot(aes(y = Ymg, x = Trat, fill = Zafra ))+
#facet_wrap(~Zafra)+
geom_boxplot()+
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
lmerTest::difflsmeans(mod_mix2)
mod_mix2 <- lmer(Ymg ~ Trat  + ( Trat | Zafra) , data = bd_raw)
lmerTest::difflsmeans(mod_mix1)
lmerTest::difflsmeans(mod_mix2)
?lmer
?sd
ks.test(c(rnomr(10)))
ks.test(c(rnorm(10)))
shapiro.test(c(rnorm(10)))
x <- shapiro.test(c(rnorm(10)))
x$p.value
shapiro.test()
?shapiro.test
shapiro.test(c(rnorm(10)))
shapiro.test(c(rnorm(100)))
require(pysch)
pacman::p_load(pysch)
require(psych)
?\psych::describe
?psych::describe
?summarise
?summarise_all
?mao
?map
